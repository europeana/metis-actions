name: RELEASE

on:
  workflow_call:
    inputs:
      release-version:
        description: 'The version of the intended release, should be just a number'
        required: true
        type: string
      new-snapshot-version:
        description: 'The version of the intended new snapshot'
        required: true
        type: string
      commit-hash-branch:
        description: 'The commit hash or branch to use as a base for the merge and release(default: develop)'
        required: false
        default: develop
        type: string
      target-merge-branch:
        description: 'The target branch to merge to. This gives an option for newer repos that use main instead of master.(default: master)'
        required: false
        default: master
        type: string
    secrets:
      METIS_PERSONAL_ACCESS_TOKEN:
        required: true

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code (source)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          # USE PERSONAL ACCESS TOKEN instead of the default to allow triggering CI workflow
          token: ${{ secrets.METIS_PERSONAL_ACCESS_TOKEN }}
          ref: ${{ inputs.commit-hash-branch }}

      - name: Setup git config
        run: |
          git config --local user.name 'github-actions[bot]'
          git config --local user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Create release branch
        run: git checkout -b release/v${{ inputs.release-version }}

      - name: Update versions on poms(release) and commit(If the version is the same with what is already in the pom the build will fail)
        run: |
          mvn versions:set -DnewVersion=${{ github.event.inputs.release-version }} -DgenerateBackupPoms=false --quiet
          find . -name 'pom.xml' | xargs git add
          git commit -m "Set release version ${{ github.event.inputs.release-version }}"

        #It will fail if the branch already exists
      - name: Push release branch
        run: git push -u origin release/v${{ inputs.release-version }}

      - name: Checkout Master and merge reference with default commit message
        # --strategy-option theirs is added for the case where the version is updated on both branches(could potentially be removed in the future)
        run: |
          git checkout ${{ inputs.target-merge-branch }}
          git merge release/v${{ inputs.release-version }} --strategy-option theirs --no-edit
          git push

      - name: Tag commit with provided version and push
        run: |
          git tag v${{ inputs.release-version }}
          git push
          git push origin v${{ inputs.release-version }}

      - name: Generate changelog between last two release tags (v*)
        run: |
          VERSIONS_RANGE=`git tag --sort=-creatordate  | head -2 | tail -1`..`git tag --sort=-creatordate | head -1`
          echo "VERSIONS_RANGE: ${VERSIONS_RANGE}"
          git log --pretty="%s" ${VERSIONS_RANGE} > changelog.txt

      - name: Curate changelog to releaselog
        run: |
          grep --ignore-case '^feat\|feature' changelog.txt > feature.txt || true
          grep --ignore-case '^debt' changelog.txt > debt.txt || true
          grep --ignore-case '^bug' changelog.txt > bug.txt || true
          grep --ignore-case --invert-match '^feat\|feature\|debt\|bug' changelog.txt > miscellaneous.txt || true
          
          sed --in-place 's/^\(feat\|feature\)\///Ig' feature.txt
          sed --in-place 's/^debt\///Ig' debt.txt
          sed --in-place 's/^bug\///Ig' bug.txt

          echo -e "FEATURES:" >> releaselog.txt
          cat feature.txt >> releaselog.txt
          echo -e >> releaselog.txt

          echo -e "DEBT:" >> releaselog.txt
          cat debt.txt >> releaselog.txt
          echo -e >> releaselog.txt

          echo -e "BUGS:" >> releaselog.txt
          cat bug.txt >> releaselog.txt
          echo -e >> releaselog.txt

          echo -e "MISCELLANEOUS:" >> releaselog.txt
          cat miscellaneous.txt >> releaselog.txt
          echo -e >> releaselog.txt
          
          sed --in-place 's/MET[ -]/MET-/Ig' releaselog.txt
          cat releaselog.txt

      - name: Create Github release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          bodyFile: "releaselog.txt"
          tag: v${{ inputs.release-version }}
          draft: true

      - name: Checkout reference
        run: git checkout ${{ inputs.commit-hash-branch }}

      - name: Update versions on poms(reference) and commit(If the version is the same with what is already in the pom the build will fail)
        run: |
          mvn versions:set -DnewVersion=${{ inputs.new-snapshot-version }} -DgenerateBackupPoms=false --quiet
          find . -name 'pom.xml' | xargs git add
          git commit -m "Set new snapshot version ${{ inputs.new-snapshot-version }}"

      - name: Push updated reference
        run: git push origin ${{ inputs.commit-hash-branch }}
